{"version":3,"file":"game.js","mappings":"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","sources":["webpack://unity-inspired-component-system/../game-engine/src/abstract/IDisposable.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/Game.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/components/RigidBody.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/components/Sprite.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/components/Transform.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/ecs/Ecs.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/geometry/Circle.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/geometry/Line.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/geometry/Polygon.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/geometry/Rectangle.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/geometry/Shape.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/geometry/Triangle.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/infrastructure/Logger.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/input/InputManager.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/input/KeyCode.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/input/MouseButtonCode.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/math/Point.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/math/Vector2D.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/rendering/Canvas2DRenderer.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/scenes/Scene.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/scenes/SceneManager.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/state/State.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/state/StateMachine.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/systems/MovementSystem.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/systems/RenderingSystem.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/types/CommonTypes.ts","webpack://unity-inspired-component-system/../game-engine/src/engine/types/ViewPort.ts","webpack://unity-inspired-component-system/../game-engine/src/index.ts","webpack://unity-inspired-component-system/webpack/bootstrap","webpack://unity-inspired-component-system/./src/main.ts"],"sourcesContent":["\r\n/**\r\n * \r\n */\r\nexport interface IDisposable {\r\n    /**\r\n     * Dispose object. \r\n     */\r\n    dispose(): void;\r\n}\r\n\r\n/**\r\n * Checks if object is disposable.\r\n * @param object \r\n */\r\nexport function isDisposable(object: any): object is IDisposable {\r\n    return typeof object[\"dispose\"] === \"function\";\r\n}","import { Rectangle } from './geometry/Rectangle';\r\nimport { Canvas2DRenderer } from \"./rendering/Canvas2DRenderer\";\r\nimport { InputManager } from \"./input/InputManager\";\r\nimport { ViewPort } from \"./types/ViewPort\";\r\nimport { SceneManager } from './scenes/SceneManager';\r\nimport { ECSRegistry } from \"./ecs/Ecs\"\r\nimport MovementSystem from \"./systems/MovementSystem\";\r\nimport IRenderer from \"./rendering/IRenderer\";\r\n\r\nexport class Game {\r\n    \"use strict\";\r\n    \r\n    //********************************************\r\n    //** attributes\r\n    //********************************************\r\n    \r\n    public  readonly _input         : InputManager;\r\n    private readonly _canvas        : HTMLCanvasElement;\r\n    private readonly _renderer      : IRenderer;\r\n    private readonly _sceneManager  : SceneManager;\r\n    private _options                : GameOptions;\r\n    private _previousDelta          : number = 0;\r\n    private _viewPort               : ViewPort;\r\n    \r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n    \r\n    constructor(options?: GameOptions) { \r\n        this._options = Object.assign({}, _defaultOptions, options);        \r\n        this._canvas        = document.getElementById(\"c\") as HTMLCanvasElement;\r\n        this._input         = new InputManager();\r\n        this._renderer      = new Canvas2DRenderer(this._canvas);\r\n        this._sceneManager  = new SceneManager(this);\r\n\r\n        this._updateViewPort();\r\n    }\r\n    \r\n    //********************************************\r\n    //** getters:\r\n    //********************************************\r\n    \r\n    get viewPort()      : ViewPort      { return this._viewPort; }\r\n    get input()         : InputManager  { return this._input; }\r\n    get sceneManager()  : SceneManager  { return this._sceneManager; }\r\n    get canvas()        : HTMLCanvasElement { return this._canvas; }\r\n    get renderer()      : IRenderer { return this._renderer; }\r\n    \r\n    //********************************************\r\n    //**public:\r\n    //********************************************\r\n    \r\n    /**\r\n     * Initialize game variables and configs. \r\n     * @param options \r\n     */\r\n    init(): Game {\r\n        this._input.init();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Start game loop\r\n     */\r\n    run(): void {\r\n        this._update(0);\r\n    }\r\n\r\n    //********************************************\r\n    //**private:\r\n    //********************************************\r\n    \r\n    /**\r\n     * Updates the view port.\r\n     */\r\n    private _updateViewPort(): void {\r\n        this._viewPort = {\r\n            width:   Math.max(document.documentElement.clientWidth, window.innerWidth || 0),\r\n            height:  Math.max(document.documentElement.clientHeight, window.innerHeight || 0)\r\n        }\r\n\r\n        this._canvas.width = this._viewPort.width;\r\n        this._canvas.height = this._viewPort.height;\r\n    }\r\n\r\n    /**\r\n     * Update and redraw game state. \r\n     * \r\n     * @param now \r\n     */\r\n    private _update(now: number): void {\r\n        let deltaTime: number = (now - this._previousDelta)/1000;\r\n        this._previousDelta = now;\r\n        \r\n        this._updateViewPort();\r\n        \r\n        this._sceneManager.update(deltaTime);\r\n     \r\n        this._render(deltaTime);\r\n\r\n        this._input.update();\r\n        requestAnimationFrame(this._update.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Clear canvas and render scene.\r\n     * \r\n     * @param dt  \r\n     */\r\n    private _render(dt: number): void {\r\n        let clearRect: Rectangle = new Rectangle(this._viewPort.width, this._viewPort.height);\r\n        this._renderer.renderRect(0, 0, clearRect, this._options.clearColor);\r\n        this._sceneManager.renderScene();\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n */\r\nexport interface GameOptions {\r\n    clearColor?: string;\r\n}\r\n\r\n/**\r\n * \r\n */\r\nlet _defaultOptions: GameOptions = {\r\n    clearColor: \"#000000\"\r\n};\r\n","import {Vector2D} from \"../math/Vector2D\";\r\n\r\nexport class RigidBody {\r\n\r\n    velocity: Vector2D;\r\n    acceleration: Vector2D;\r\n\r\n    constructor(velocity: Vector2D = Vector2D.Zero) {\r\n        console.log(velocity.x, velocity.y);\r\n        this.velocity = velocity;\r\n        this.acceleration = Vector2D.Zero;\r\n    }\r\n}","export class Sprite {\r\n    width: number = 0;\r\n    height: number = 0;\r\n\r\n    constructor(width: number = 0, height: number = 0) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}","import {Vector2D} from \"../math/Vector2D\";\r\n\r\nexport class Transform {\r\n\r\n    position: Vector2D;\r\n    scale: Vector2D;\r\n    angle: number;\r\n\r\n    constructor(\r\n        position: Vector2D = Vector2D.Zero,\r\n        scale: Vector2D = Vector2D.One,\r\n        angle: number = 0) {\r\n\r\n        this.position = position;\r\n        this.scale = scale;\r\n        this.angle = angle;\r\n    }\r\n}","import Logger from \"../infrastructure/Logger\"\r\n\r\n//********************************************\r\n\r\nconst logger = Logger.from(\"Ecs.ts\");\r\n\r\n//********************************************\r\n\r\nexport type ComponentConstructor<T> = new(...args: any[]) => T;\r\nexport type SystemConstructor<T extends System> = new(...args: any[]) => T;\r\n\r\n//********************************************\r\n\r\n/**\r\n * A signature that identifies an entity and\r\n * what requirements a systems needs.\r\n */\r\nclass Signature {\r\n\r\n    //********************************************\r\n    //** fields:\r\n    //********************************************\r\n\r\n    private _bits: number;\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n\r\n    constructor(bits: number = 0) {\r\n        this._bits = bits;\r\n    }\r\n\r\n    //********************************************\r\n    //** public:\r\n    //********************************************\r\n\r\n    /**\r\n     * Sets the value of a bit (1 | 0)\r\n     * @param index\r\n     * @param flag\r\n     */\r\n    public set(index: number, flag: boolean = true): void {\r\n        if (flag) {\r\n            this._bits |= (1 << index);\r\n        } else {\r\n            this._bits ^= (1 << index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if bit is set\r\n     * @param index\r\n     */\r\n    public test(index: number): boolean {\r\n        let partition = (1 << index);\r\n        return (partition & this._bits) == partition;\r\n    }\r\n\r\n    /**\r\n     * Gets the raw representation of the signature.\r\n     */\r\n    public getBits(): number {\r\n        return this._bits;\r\n    }\r\n}\r\n\r\n//********************************************\r\n\r\nexport class Entity {\r\n\r\n    //********************************************\r\n    //** fields:\r\n    //********************************************\r\n\r\n    private readonly _id: number;\r\n    private readonly _registry: ECSRegistry;\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n    \r\n    constructor(id: number, registry: ECSRegistry) {\r\n        this._id = id;\r\n        this._registry = registry;\r\n    }\r\n    \r\n    //********************************************\r\n    //** getters & setters:\r\n    //********************************************\r\n    \r\n    public get id() {return this._id;}\r\n    public get registry(): ECSRegistry { return this._registry; }\r\n    \r\n    //********************************************\r\n    //** proxies:\r\n    //********************************************\r\n    \r\n    public addComponent<T>(type: ComponentConstructor<T>, ...args: any[]): void { this._registry.addComponent(this, type, ...args); }\r\n    public removeComponent<T>(type: ComponentConstructor<T>): void { this._registry.removeComponent(this, type); }\r\n    public hasComponent<T>(type: ComponentConstructor<T>): boolean { return this._registry.hasComponent(this, type); }\r\n    public getComponent<T>(type: ComponentConstructor<T>): T { return this._registry.getComponent(this, type); }\r\n}\r\n\r\n\r\n//********************************************\r\n\r\nclass Component {\r\n    private static _nextId: number = 0;\r\n    static _map: Map<ComponentConstructor<any>, number> = new Map<ComponentConstructor<any>, number>();\r\n\r\n    static getId(type: ComponentConstructor<any>): number {\r\n        if(!this._map.has(type)) {\r\n            this._map.set(type, this._nextId++);\r\n        }\r\n        return this._map.get(type);\r\n    }\r\n}\r\n\r\n//********************************************\r\n\r\nexport class System {\r\n    \r\n    //********************************************\r\n    //** fields:\r\n    //********************************************\r\n    \r\n    private readonly _signature: Signature = new Signature();\r\n    private readonly _entities: Entity[] = [];\r\n    \r\n    //********************************************\r\n    //** getters & setters:\r\n    //********************************************\r\n    \r\n    public get entities() {return this._entities;}\r\n    public get signature() {return this._signature;}\r\n    \r\n    //********************************************\r\n    //** public:\r\n    //********************************************\r\n    \r\n    public addEntity(entity: Entity): void {\r\n        this._entities.push(entity);\r\n    }\r\n\r\n    public removeEntity(entity: Entity): void {\r\n        Array.prototype.splice.call(this._entities, this._entities.indexOf(entity), 1);\r\n    }\r\n\r\n    //********************************************\r\n    //** private & protected:\r\n    //********************************************\r\n    \r\n    /**\r\n     * Defines the component type that entities must have\r\n     * to be considered by the system\r\n     * @param type\r\n     * @protected\r\n     */\r\n    protected requireComponent<T>(type: ComponentConstructor<T>): void {\r\n        const componentId = Component.getId(type);\r\n        this._signature.set(componentId);\r\n    }\r\n}\r\n\r\n//********************************************\r\n\r\nclass Pool<T> {\r\n    components: T[] = [];\r\n    isEmpty(): boolean { return this.components.length == 0; }\r\n    getSize(): number {return this.components.length;}\r\n    clear(): void { this.components = []; }\r\n    add(object: T): void { this.components.push(object); }\r\n    set(index: number, object: T) { this.components[index] = object; }\r\n    get(index: number) : T {return this.components[index];}\r\n}\r\n\r\n//********************************************\r\n\r\n/**\r\n * The ECS Registry that keeps track of all the\r\n * entities, components and systems.\r\n */\r\nexport class ECSRegistry {\r\n\r\n    //********************************************\r\n    //** fields:\r\n    //********************************************\r\n\r\n    _numberOfComponents: number = 0;\r\n    _entitySignatures: Record<number, Signature> = {};\r\n    _componentPools: Map<number, Pool<any>> = new Map<number, Pool<any>>();\r\n    _systems: Map<SystemConstructor<any>, System> = new Map<SystemConstructor<any>, System>();\r\n    _entitiesToBeAdded: Entity[] = [];\r\n    _entitiesToBeRemoved: Entity[] = [];\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n\r\n    constructor() {\r\n        logger.info(\"ECSRegistry created...\");\r\n    }\r\n\r\n    //********************************************\r\n    //** public:\r\n    //********************************************\r\n\r\n    /**\r\n     * Creates an entity with its own unique id.\r\n     */\r\n    public createEntity(): Entity {\r\n        const entity = new Entity(this._numberOfComponents++, this);\r\n        logger.info(`Created entity with id ${entity.id}`);\r\n\r\n        this._entitiesToBeAdded.push(entity);\r\n\r\n        this._entitySignatures[entity.id] = new Signature();\r\n\r\n        return entity;\r\n    }\r\n\r\n    /**\r\n     * Adds or removes queued entities.\r\n     */\r\n    public update(): void {\r\n        this._entitiesToBeAdded.forEach(entity => {\r\n            this._addEntityToSystems(entity);\r\n        });\r\n        this._entitiesToBeAdded = [];\r\n\r\n        this._entitiesToBeRemoved.forEach(entity => {\r\n            this._removeEntityFromSystems(entity);\r\n        });\r\n        this._entitiesToBeRemoved = [];\r\n    }\r\n\r\n    /**\r\n     * Adds a component to an entity.\r\n     * @param entity - the entity that the component should be attached to.\r\n     * @param type   - the constructor of the component that should be added.\r\n     * @param args   - additional component constructor arguments.\r\n     */\r\n    public addComponent<T>(entity: Entity, type: ComponentConstructor<T>, ...args: any[]): void {\r\n        const componentId = Component.getId(type);\r\n\r\n        if (!this._componentPools.get(componentId)) {\r\n            this._componentPools.set(componentId, new Pool<T>());\r\n        }\r\n\r\n        //const component = new (Function.prototype.bind.apply(type, args));\r\n        const component = new type(...args);\r\n\r\n        this._componentPools.get(componentId).set(entity.id, component);\r\n\r\n        logger.info(`Added component ${componentId} to entity ${entity.id}`);\r\n\r\n        this._entitySignatures[entity.id].set(componentId);\r\n    }\r\n\r\n    /**\r\n     * Removes a component from the entity.\r\n     * @param entity\r\n     * @param type\r\n     */\r\n    public removeComponent<T>(entity: Entity, type: ComponentConstructor<T>): void {\r\n        const componentId = Component.getId(type);\r\n\r\n        this._entitySignatures[entity.id].set(componentId, false);\r\n\r\n        logger.info(`Removed component ${componentId} to entity ${entity.id}`);\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has component.\r\n     * @param entity\r\n     * @param type\r\n     */\r\n    public hasComponent<T>(entity: Entity, type: ComponentConstructor<T>): boolean {\r\n        const componentId = Component.getId(type);\r\n\r\n        return this._entitySignatures[entity.id].test(componentId);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the component of type from the entity.\r\n     * @param entity\r\n     * @param type\r\n     */\r\n    public getComponent<T>(entity: Entity, type: ComponentConstructor<T>): T {\r\n        const componentId = Component.getId(type);\r\n        if (!this._componentPools.has(componentId)){\r\n            return null;\r\n        }\r\n\r\n        return this._componentPools.get(componentId).get(entity.id);\r\n    }\r\n\r\n    //********************************************\r\n\r\n    public addSystem<T extends System>(ctor: SystemConstructor<T>, ...args: any[]): void {\r\n        if (!this._systems.has(ctor)) {\r\n            const system = new ctor(args);\r\n            this._systems.set(ctor, system);\r\n        }\r\n    }\r\n\r\n    //********************************************\r\n\r\n    public getSystem<T extends System>(ctor: SystemConstructor<T>): T {\r\n        if (this._systems.has(ctor)) {\r\n            return <T>this._systems.get(ctor);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //********************************************\r\n    //** private:\r\n    //********************************************\r\n\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    private _addEntityToSystems(entity: Entity): void {\r\n        const entitySignature = this._entitySignatures[entity.id];\r\n\r\n        this._systems.forEach(system => {\r\n            const isInterested = (system.signature.getBits() & entitySignature.getBits()) == system.signature.getBits();\r\n            if (isInterested) {\r\n                system.addEntity(entity);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param entity\r\n     * @private\r\n     */\r\n    private _removeEntityFromSystems(entity: Entity): void {\r\n        // todo\r\n    }\r\n\r\n}","import {Shape} from './Shape';\r\n\r\nexport class Circle extends Shape {\r\n    \"use strict\";\r\n    //********************************************\r\n    //** attributes:\r\n    //********************************************\r\n\r\n    private _r   : number;\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n\r\n    constructor(radius: number) {\r\n        super();\r\n        this._r = radius;\r\n    }\r\n\r\n    //********************************************\r\n    //** getters:\r\n    //********************************************\r\n\r\n    get r() { return this._r; }\r\n}\r\n","import { Point } from \"./../math/point\";\r\nimport { Vector2D } from \"../math/Vector2D\";\r\nimport { Shape } from \"./Shape\";\r\n\r\nexport class Line extends Shape {\r\n\r\n    //********************************************\r\n    //** attributes:\r\n    //********************************************\r\n\r\n    private _p1     : Vector2D;\r\n    private _p2     : Vector2D;\r\n    private _dir    : Vector2D;\r\n    private _length : number;\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n\r\n    constructor(p1: Point|Vector2D, p2: Point|Vector2D) {\r\n        super();\r\n        this._p1     = new Vector2D(p1.x, p1.y);\r\n        this._p2     = new Vector2D(p2.x, p2.y);\r\n        this._dir    = this._p2.subtract(this._p1);\r\n        this._length = this._dir.length();\r\n    }\r\n\r\n    //********************************************\r\n    //** getters:\r\n    //********************************************\r\n\r\n    get p1()        : Vector2D  { return this._p1; }\r\n    get p2()        : Vector2D  { return this._p2; }\r\n    get direction() : Vector2D  { return this._dir; }\r\n    get length()    : number    { return this._length; }\r\n}\r\n","import {Shape} from './Shape';\r\nimport {Vertex} from '../types/CommonTypes';\r\nimport {Point} from '../math/Point';\r\n\r\nexport class Polygon extends Shape {\r\n\r\n    //********************************************\r\n    //** attributes:\r\n    //********************************************\r\n\r\n    private _vertices: Vertex[];\r\n    private _origin: Point | null;\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n\r\n    constructor(vertices: Vertex[]) {\r\n        super();\r\n        this._vertices = vertices;\r\n    }\r\n\r\n    //********************************************\r\n    //** getters:\r\n    //********************************************\r\n\r\n    get vertices(): Vertex[] { return this._vertices; }\r\n    get origin(): Point {\r\n        return this._origin || (this._origin = this._calculateCenterOrigin());\r\n    }\r\n    set origin(origin: Point) { this._origin = origin; }\r\n\r\n    //********************************************\r\n    //** methods:\r\n    //********************************************\r\n\r\n    private _calculateCenterOrigin(): Point {\r\n        if (this._vertices.length === 0) {\r\n            return { x: 0, y: 0 };\r\n        }\r\n\r\n        let minX: number = Number.MAX_SAFE_INTEGER;\r\n        let maxX: number = -Number.MAX_SAFE_INTEGER;\r\n        let minY: number = Number.MAX_SAFE_INTEGER;\r\n        let maxY: number = -Number.MAX_SAFE_INTEGER;\r\n\r\n        this._vertices.forEach(([x, y]) => {\r\n            minX = Math.min(x, minX);\r\n            maxX = Math.max(x, maxX);\r\n            minY = Math.min(y, minY);\r\n            maxY = Math.max(y, maxY);\r\n        });\r\n\r\n        return {\r\n            x: (maxX - minY) / 2,\r\n            y: (maxY - minY) / 2\r\n        };\r\n    }\r\n}\r\n","import { Shape } from './Shape';\r\n\r\nexport class Rectangle extends Shape {\r\n\r\n    //********************************************\r\n    //** attributes:\r\n    //********************************************\r\n\r\n    private _width  : number;\r\n    private _height : number;\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n\r\n    constructor(width: number, height: number) {\r\n        super();\r\n        this._width   = width;\r\n        this._height  = height;\r\n    }\r\n\r\n    //********************************************\r\n    //** getters:\r\n    //********************************************\r\n\r\n    get width()     : number   { return this._width; }\r\n    get heigth()    : number   { return this._height; }\r\n}\r\n","export abstract class Shape {\r\n\r\n    //********************************************\r\n    //** attributes:\r\n    //********************************************\r\n\r\n    rotationOffset: number = 0;\r\n}\r\n","import {Polygon} from './Polygon';\r\n\r\nexport class Triangle extends Polygon {\r\n\r\n    //********************************************\r\n    //** attributes:\r\n    //********************************************\r\n\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n\r\n    constructor(width: number, height: number) {\r\n        super([\r\n            [0,height * -0.5],\r\n            [width * 0.5, height * 0.5],\r\n            [width * -0.5, height * 0.5],\r\n        ]);\r\n        this._width = width;\r\n        this._height = height;\r\n    }\r\n\r\n    get width(): number { return this._width; }\r\n    get height(): number { return this._height; }\r\n}\r\n","export enum LogLevel {\r\n    ERROR,\r\n    WARNING,\r\n    CRITICAL,\r\n    INFO,\r\n    DEBUG\r\n}\r\n\r\nexport default class Logger {\r\n\r\n    static from(source: string): Logger {\r\n        return new Logger(source);\r\n    }\r\n\r\n    private readonly _source: string;\r\n\r\n    constructor(source: string) {\r\n        this._source = source;\r\n    }\r\n\r\n    log(level: LogLevel, msg: string): void {\r\n        const timeStamp = this._timeStamp();\r\n        const levelName: string = LogLevel[level];\r\n        const logLine: string = `${timeStamp} ${this._source} [${levelName}]: ${msg}`;\r\n        console.log(logLine);\r\n    }\r\n\r\n    error(msg: string) { this.log(LogLevel.ERROR, msg);}\r\n    warning(msg: string) { this.log(LogLevel.WARNING, msg);}\r\n    critical(msg: string) { this.log(LogLevel.CRITICAL, msg);}\r\n    info(msg: string) { this.log(LogLevel.INFO, msg);}\r\n    debug(msg: string) { this.log(LogLevel.DEBUG, msg);}\r\n\r\n    private _timeStamp(): string {\r\n        let now = new Date(Date.now());\r\n        return `[${now.toLocaleDateString()} ${now.toLocaleTimeString()}]`;\r\n    }\r\n}","import { Point } from './../math/Point';\r\nimport { MouseButtonCode } from './MouseButtonCode';\r\nimport { KeyCode } from \"./KeyCode\";\r\n\r\nexport class InputManager {\r\n    \"use strict\";\r\n    \r\n    //********************************************\r\n    //** attributes:\r\n    //********************************************\r\n  \r\n    private _currentKeyMap          : {[key:number]: boolean} = {};\r\n    private _previousKeyMap         : {[key:number]: boolean} = {};\r\n    private _currentMouseBtnMap     : {[key:number]: boolean} = {};\r\n    private _previousMouseBtnMap    : {[key:number]: boolean} = {};\r\n    private readonly _mousePosition : Point = {x: 0, y: 0};\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n\r\n    public InputManager() {\r\n\r\n    }\r\n    \r\n    //********************************************\r\n    //** public:\r\n    //********************************************\r\n    \r\n    /**\r\n     * \r\n     */\r\n    init(): void {\r\n        window.addEventListener(\"mousedown\", this._onMouseDownEventHandler.bind(this));\r\n        window.addEventListener(\"mouseup\", this._onMouseUpEventHandler.bind(this));\r\n        window.addEventListener(\"mousemove\", this._onMouseMoveEventHandler.bind(this));\r\n        window.addEventListener(\"keydown\", this._onKeyDownEventHandler.bind(this));\r\n        window.addEventListener(\"keyup\", this._onKeyUpEventHandler.bind(this)); \r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    dispose(): void {\r\n        window.removeEventListener(\"mousedown\", this._onMouseDownEventHandler.bind(this));\r\n        window.removeEventListener(\"mouseup\", this._onMouseUpEventHandler.bind(this));\r\n        window.removeEventListener(\"mousemove\", this._onMouseMoveEventHandler.bind(this));\r\n        window.removeEventListener(\"keydown\", this._onKeyDownEventHandler.bind(this));\r\n        window.removeEventListener(\"keyup\", this._onKeyUpEventHandler.bind(this)); \r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the mouse position.\r\n     */\r\n    getMousePosition(relativeElement?: HTMLElement): Point {\r\n        if (relativeElement == null) {\r\n            return this._mousePosition;\r\n        } else {\r\n            let bbox    : ClientRect = relativeElement.getBoundingClientRect(),\r\n                relativeX : number     = this._mousePosition.x - bbox.left,\r\n                relativeY : number     = this._mousePosition.y - bbox.top;\r\n\r\n            relativeX = Math.max(0, Math.min(relativeX, bbox.width));\r\n            relativeY = Math.max(0, Math.min(relativeY, bbox.height));\r\n\r\n            return {\r\n                x: relativeX,\r\n                y: relativeY\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the given mouse btn is held down.\r\n     * \r\n     * @param btnCode \r\n     */\r\n    isMouseButtonDown(btnCode: number|MouseButtonCode): boolean {\r\n        return this._currentMouseBtnMap[btnCode] === true;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given mouse btn is pressed.\r\n     * \r\n     * @param btnCode \r\n     */\r\n    isMouseButtonPressed(btnCode: number|MouseButtonCode): boolean {\r\n        return this._currentMouseBtnMap[btnCode] === true && this._previousMouseBtnMap[btnCode] !== true;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param btnCode \r\n     */\r\n    isMouseButtonReleased(btnCode: number|MouseButtonCode): boolean {\r\n        return this._currentMouseBtnMap[btnCode] !== true && this._previousMouseBtnMap[btnCode] === true;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given key is held down.\r\n     * \r\n     * @param btnCode \r\n     */\r\n    isKeyDown(keyCode: number|KeyCode): boolean {\r\n        return this._currentKeyMap[keyCode] === true;\r\n    }\r\n\r\n     /**\r\n     * Checks if the given key is pressed.\r\n     * \r\n     * @param btnCode \r\n     */\r\n    isKeyPressed(keyCode: number|KeyCode): boolean {\r\n        return this._currentKeyMap[keyCode] === true && this._previousKeyMap[keyCode] !== true;\r\n    }\r\n    \r\n    /**\r\n     * Update input state.\r\n     */\r\n    update(): void {\r\n        this._previousKeyMap = Object.assign({}, this._currentKeyMap);\r\n        this._previousMouseBtnMap = Object.assign({}, this._currentMouseBtnMap);\r\n    }\r\n\r\n    //********************************************\r\n    //** private:\r\n    //********************************************\r\n    \r\n    private _onMouseDownEventHandler(event: MouseEvent): void {\r\n        this._currentMouseBtnMap[event.button] = true;\r\n    }\r\n\r\n    private _onMouseUpEventHandler(event: MouseEvent): void {\r\n        delete this._currentMouseBtnMap[event.button];\r\n    }\r\n\r\n    private _onKeyDownEventHandler(event: KeyboardEvent): void {\r\n        event.preventDefault();\r\n        this._currentKeyMap[event.keyCode] = true;\r\n    }\r\n\r\n    private _onKeyUpEventHandler(event: KeyboardEvent): void {\r\n        delete this._currentKeyMap[event.keyCode];\r\n    }\r\n\r\n    private _onMouseMoveEventHandler(event: MouseEvent): void {\r\n        this._mousePosition.x = event.clientX;\r\n        this._mousePosition.y = event.clientY;\r\n    }\r\n}","export enum KeyCode  {\r\n    // Special keys\r\n    Backspace  = 8,\r\n    Tab        = 9,\r\n    Enter      = 13,\r\n    Shift      = 16,\r\n    Cntr       = 17,\r\n    Alt        = 18,\r\n    PauseBreak = 19,\r\n    CapsLock   = 20,\r\n\r\n    Space       = 32,\r\n    PageUp      = 33,\r\n    PageDown    = 34,\r\n    End         = 35,\r\n    Home        = 36,\r\n\r\n    Arrow_Left  = 37,\r\n    Arrow_Up    = 38,\r\n    Arrow_Right = 39,\r\n    Arrow_Down  = 40,\r\n\r\n    PrintScreen = 44,\r\n    Insert      = 45,\r\n    Delete      = 46,\r\n\r\n    // Keys\r\n    Key_0 = 48,\r\n    Key_1 = 49,\r\n    Key_2 = 50,\r\n    Key_3 = 51,\r\n    Key_4 = 52,\r\n    Key_5 = 53,\r\n    Key_6 = 54,\r\n    Key_7 = 55,\r\n    Key_8 = 56,\r\n    Key_9 = 57,\r\n    A = 65,\r\n    B = 66,\r\n    C = 67,\r\n    D = 68,\r\n    E = 69,\r\n    F = 70,\r\n    G = 71,\r\n    H = 72,\r\n    I = 73,\r\n    J = 74,\r\n    K = 75, \r\n    L = 76,\r\n    M = 77,\r\n    N = 78,\r\n    O = 79,\r\n    P = 80, \r\n    Q = 81, \r\n    R = 82, \r\n    S = 83,\r\n    T = 84,\r\n    U = 85,\r\n    V = 86,\r\n    W = 87,\r\n    X = 88,\r\n    Y = 89,\r\n    Z = 90,\r\n\r\n    Comma  = 188,\r\n    Dash   = 189,\r\n    Period = 190,\r\n    Tilde  = 220\r\n}","export enum MouseButtonCode {\r\n    Left    = 0,\r\n    Middle  = 1,\r\n    Right   = 2,\r\n}","export interface Point {\r\n    x: number;\r\n    y: number;\r\n}"," export class Vector2D {\r\n\r\n    //********************************************\r\n    //** factory:\r\n    //********************************************\r\n\r\n     public static from(x: number, y: number) : Vector2D { return new Vector2D(x,y);}\r\n\r\n    //********************************************\r\n    //** read only attributes.\r\n    //********************************************\r\n\r\n    public static readonly Zero     = new Vector2D();\r\n    public static readonly One      = new Vector2D(1,1);\r\n    public static readonly Left     = new Vector2D(-1,0);\r\n    public static readonly Right    = new Vector2D(1,0);\r\n    public static readonly Up       = new Vector2D(0,-1);\r\n    public static readonly Down     = new Vector2D(0,1);\r\n\r\n    //********************************************\r\n    //** attributes:\r\n    //********************************************\r\n\r\n    private _x: number;\r\n    private _y: number;\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n\r\n    constructor(x: number = 0, y: number = 0) {\r\n        this._x = x;\r\n        this._y = y;\r\n    }\r\n\r\n    //********************************************\r\n    //**\r\n    //********************************************\r\n\r\n    get x(): number { return this._x; }\r\n    get y(): number { return this._y; }\r\n    get isZero(): boolean { return this.equal(Vector2D.Zero); }\r\n    get isOne(): boolean { return this.equal(Vector2D.One); }\r\n\r\n    //********************************************\r\n    //** public:\r\n    //********************************************\r\n\r\n    /**\r\n     * Adds another vector to the vector.\r\n     * Returns a new instance of Vector2D\r\n     *\r\n     * @param vec\r\n     */\r\n    add(vec: Vector2D|number, y?: number): Vector2D {\r\n        let nx: number,\r\n            ny: number;\r\n\r\n        if (typeof vec === \"number\") {\r\n            nx = this._x + vec;\r\n            ny = this._y + (y || vec);\r\n        } else {\r\n            nx = this._x + vec.x;\r\n            ny = this._y + vec.y;\r\n        }\r\n\r\n        return new Vector2D(nx, ny);\r\n    }\r\n\r\n    /**\r\n     * Subtracts another vector to the vector.\r\n     * Returns a new instance of Vector2D\r\n     *\r\n     * @param vec\r\n     */\r\n    subtract(vec: Vector2D|number, y?: number): Vector2D {\r\n        let nx: number,\r\n            ny: number;\r\n\r\n        if (typeof vec === \"number\") {\r\n            nx = this._x - vec;\r\n            ny = this._y - (y || vec);\r\n        } else {\r\n            nx = this._x - vec.x;\r\n            ny = this._y - vec.y;\r\n        }\r\n\r\n        return new Vector2D(nx, ny);\r\n    }\r\n\r\n    /**\r\n     * Multiplies another vector to the vector.\r\n     * Returns a new instance of Vector2D\r\n     *\r\n     * @param vec\r\n     */\r\n    multiply(vec: Vector2D|number, y?: number): Vector2D {\r\n        let nx: number = 0,\r\n            ny: number = 0;\r\n\r\n        if (typeof vec === \"number\") {\r\n            nx = this._x * vec;\r\n            ny = this._y * (y || vec);\r\n        } else {\r\n            nx = this._x * vec.x;\r\n            ny = this._y * vec.y;\r\n        }\r\n\r\n        return new Vector2D(nx, ny);\r\n    }\r\n\r\n    /**\r\n     * Multiplies another vector to the vector.\r\n     * Returns a new instance of Vector2D\r\n     *\r\n     * @param vec\r\n     */\r\n    divide(vec: Vector2D|number, y?: number): Vector2D {\r\n        let nx: number = 0,\r\n            ny: number = 0;\r\n\r\n        if (typeof vec === \"number\") {\r\n            nx = this._x / vec;\r\n            ny = this._y / (y || vec);\r\n        } else {\r\n            nx = this._x / vec.x;\r\n            ny = this._y / vec.y;\r\n        }\r\n\r\n        return new Vector2D(nx, ny);\r\n    }\r\n\r\n    /**\r\n     * Normalizes the current vector.\r\n     * Returns a new instance of Vector2D\r\n     */\r\n    normalize(): Vector2D {\r\n        let lenght: number = this.length();\r\n        if (lenght != 0) {\r\n            return new Vector2D(this._x / lenght, this._y / lenght);\r\n        } else {\r\n            return new Vector2D();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    normal(): Vector2D {\r\n        return new Vector2D(-this.y, this.x).normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the length of the current vector.\r\n     */\r\n    length(): number {\r\n        return Math.sqrt((this._x * this._x) + (this._y * this._y));\r\n    }\r\n\r\n     /**\r\n      * Gets the squared length of the current vector.\r\n      */\r\n    lengthSqr(): number {\r\n        return (this._x * this._x) + (this._y * this._y);\r\n    }\r\n\r\n    /**\r\n     * Checks if the vector x and y is equal to the given vector.\r\n     *\r\n     * @param vec\r\n     */\r\n    equal(vec: Vector2D): boolean {\r\n        return vec != null && this._x === vec.x && this._y === vec.y;\r\n    }\r\n\r\n    /**\r\n     * Finds the dot product between the two vectors.\r\n     *\r\n     * @param vec\r\n     */\r\n    dot(vec: Vector2D): number {\r\n        let unit1: Vector2D = this.normalize(),\r\n            unit2: Vector2D = vec.normalize();\r\n\r\n        return (unit1.x * unit2.x) + (unit1.y * unit2.y);\r\n    }\r\n\r\n    /**\r\n     * Finds the cross product between two vectors.\r\n     * @param vec\r\n     */\r\n    cross(vec: Vector2D): number {\r\n        let unit1: Vector2D = this.normalize(),\r\n            unit2: Vector2D = vec.normalize();\r\n\r\n        return (unit1.x * unit2.x) - (unit1.y * unit2.y);\r\n    }\r\n\r\n    /**\r\n     * Checks if the\r\n     *\r\n     * @param vec\r\n     */\r\n    isPerpendicular(vec: Vector2D): boolean {\r\n        return this.dot(vec) === 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Vector2D} normal\r\n     * @return {Vector2D}\r\n     */\r\n    reflect(normal: Vector2D): Vector2D {\r\n        let n: Vector2D = normal.normalize();\r\n        let dot: number = (this.x * n.x) + (this.y * n.y);\r\n        let x: number = this.x - 2 * dot * n.x;\r\n        let y: number = this.y - 2 * dot * n.y;\r\n\r\n        return new Vector2D(x, y);\r\n    }\r\n\r\n    /**\r\n     * Rotates the vector.\r\n     *\r\n     * @param {number} angle\r\n     * @return {Vector2D}\r\n     */\r\n    rotate(angle: number): Vector2D {\r\n        let x: number = this.x * Math.cos(angle) - this.y * Math.sin(angle);\r\n        let y: number = this.x * Math.sin(angle) + this.y * Math.cos(angle);\r\n\r\n        return new Vector2D(x, y);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {Vector2D}\r\n     */\r\n    flip(): Vector2D {\r\n        return new Vector2D(-this.x, -this.y);\r\n    }\r\n\r\n     /**\r\n      * Gets the angle of the vector\r\n      */\r\n    angle(): number {\r\n        return Math.atan2(this.x, this.y);\r\n    }\r\n}\r\n","import { Rectangle } from '../geometry/Rectangle';\r\nimport { Circle } from '../geometry/Circle';\r\nimport { Line } from '../geometry/Line';\r\nimport { Vector2D } from \"../math/Vector2D\";\r\nimport { Polygon } from '../geometry/Polygon';\r\nimport IRenderer from \"./IRenderer\";\r\n\r\n// noinspection JSUnusedGlobalSymbols\r\nexport class Canvas2DRenderer implements IRenderer {\r\n\r\n    //********************************************\r\n    //** attributes:\r\n    //********************************************\r\n\r\n    private readonly _ctx           : CanvasRenderingContext2D;\r\n\r\n    //********************************************\r\n    //** ctor:\r\n    //********************************************\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this._ctx = canvas.getContext(\"2d\");\r\n    }\r\n\r\n    //********************************************\r\n\r\n    get renderingContext(): CanvasRenderingContext2D { return this._ctx; }\r\n\r\n    //********************************************\r\n    //** public:\r\n    //********************************************\r\n\r\n    /**\r\n     *\r\n     * @param x\r\n     * @param y\r\n     * @param rect\r\n     * @param colorStyle\r\n     */\r\n    public renderRect(x: number, y: number, rect: Rectangle, colorStyle: string = \"gray\"): void {\r\n        this._ctx.fillStyle = colorStyle;\r\n        this._ctx.beginPath();\r\n        this._ctx.rect(x, y, rect.width, rect.heigth);\r\n        this._ctx.fill();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param x\r\n     * @param y\r\n     * @param c\r\n     * @param colorStyle\r\n     */\r\n    public renderCircle(x: number, y: number, c: Circle, colorStyle: string = \"gray\"): void {\r\n        this._ctx.fillStyle = colorStyle;\r\n        this._ctx.beginPath();\r\n        this._ctx.arc(x, y, c.r, 0, 2 * Math.PI);\r\n        this._ctx.fill();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param l\r\n     * @param color\r\n     */\r\n    public renderLine(l: Line, color: string = \"red\"): void {\r\n        this._ctx.strokeStyle = color;\r\n        this._ctx.lineWidth = 2;\r\n        this._ctx.beginPath();\r\n        this._ctx.moveTo(l.p1.x, l.p1.y);\r\n        this._ctx.lineTo(l.p2.x, l.p2.y);\r\n        this._ctx.stroke();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param l\r\n     * @param color\r\n     */\r\n    public renderDirLine(l: Line, color: string = \"red\"): void {\r\n        this.renderLine(l);\r\n        let c: Circle = new Circle(10);\r\n        this.renderCircle(l.p2.x, l.p2.y, c, color);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param l\r\n     * @param color\r\n     */\r\n    public renderFatLine(l: Line, color: string = \"red\"): void {\r\n        this._ctx.strokeStyle = color;\r\n        this._ctx.lineWidth = 5;\r\n        this._ctx.beginPath();\r\n        this._ctx.moveTo(l.p1.x, l.p1.y);\r\n        this._ctx.lineTo(l.p2.x, l.p2.y);\r\n        this._ctx.stroke();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param x\r\n     * @param y\r\n     * @param txt\r\n     */\r\n    public renderText(txt: string, x: number|Vector2D, y?: number): void {\r\n        this._ctx.fillStyle = \"black\";\r\n        this._ctx.font = \"30px Arial\";\r\n\r\n        if (typeof x === \"number\") {\r\n            this._ctx.fillText(txt, x, y);\r\n        } else {\r\n            this._ctx.fillText(txt, x.x, x.y);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param txt\r\n     */\r\n    public getTextWidth(txt: string): number {\r\n        this._ctx.font = \"30px Arial\";\r\n        return this._ctx.measureText(txt).width;\r\n    }\r\n\r\n    public renderPolygon(x: number, y: number, rotation: number, polygon: Polygon, color: string = \"red\") {\r\n        this._ctx.save();\r\n        this._ctx.fillStyle = color;\r\n        const origin = polygon.origin || [0,0];\r\n\r\n        this._ctx.translate(x, y);\r\n        this._ctx.translate(origin[0],origin[1]);\r\n        this._ctx.rotate(rotation);\r\n        this._ctx.translate(x-origin[0], y-origin[1]);\r\n\r\n        this._ctx.beginPath();\r\n        polygon.vertices.forEach((vertex, i) => {\r\n            (i === 0)\r\n                ? this._ctx.moveTo(vertex[0], vertex[1])\r\n                : this._ctx.lineTo(vertex[0], vertex[1]);\r\n        });\r\n        this._ctx.closePath();\r\n\r\n        this._ctx.fill();\r\n        // this._ctx.stroke();\r\n        this._ctx.restore();\r\n    }\r\n}\r\n","import { IState } from \"../state/State\";\r\nimport { Game } from \"../Game\";\r\nimport {ECSRegistry, Entity} from \"../ecs/Ecs\";\r\nimport MovementSystem from \"../systems/MovementSystem\";\r\nimport {RenderingSystem} from \"../systems/RenderingSystem\";\r\n\r\n/**\r\n * A scene that can update and render game objects.\r\n */\r\nexport class Scene implements IState<Game> {\r\n\r\n    //********************************************\r\n    //**attributes:\r\n    //********************************************\r\n\r\n    private readonly _game            : Game;\r\n    private readonly _registry        : ECSRegistry;\r\n\r\n    //********************************************\r\n    //**ctor:\r\n    //********************************************\r\n\r\n    constructor(game: Game) {\r\n        this._game = game;\r\n        this._registry = new ECSRegistry();\r\n    }\r\n\r\n    //********************************************\r\n    //**getters:\r\n    //********************************************\r\n\r\n    get game()          : Game          { return this._game;}\r\n\r\n    //********************************************\r\n    //**public:\r\n    //********************************************\r\n\r\n    /**\r\n     * Create entity\r\n     */\r\n    createEntity(): Entity {\r\n        return this._registry.createEntity();\r\n    }\r\n\r\n    /**\r\n     * Initializes the scene and all\r\n     * it's components.\r\n     *\r\n     * @param {Game} game\r\n     */\r\n    initialize(game: Game): void {\r\n        this._registry.addSystem(MovementSystem);\r\n        this._registry.addSystem(RenderingSystem);\r\n    }\r\n\r\n    /**\r\n     * Update scene\r\n     */\r\n    update(deltaTime: number): void {\r\n        this._registry.update();\r\n        this._registry.getSystem(MovementSystem).update(deltaTime);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    draw(): void {\r\n        this._registry.getSystem(RenderingSystem).draw(this.game.renderer);\r\n    }\r\n\r\n    /**\r\n     * Pause scene\r\n     * @param entity\r\n     */\r\n    pause(entity: any): void {\r\n        //TODO: pause rendering and updating\r\n    }\r\n\r\n    /**\r\n     * Resume scene.\r\n     * @param entity\r\n     */\r\n    resume(entity: any): void {\r\n        //TODO: resume rendering and updating\r\n    }\r\n\r\n    /**\r\n     * Dispose scene and all its components.\r\n     * @param {Game} entity\r\n     */\r\n    dispose(entity: Game): void {\r\n\r\n    }\r\n}\r\n","import { StateMachine } from \"../state/StateMachine\";\r\nimport { Game } from \"../Game\";\r\nimport { Scene } from \"./Scene\";\r\n\r\n/**\r\n * A manager for managing scenes. \r\n */\r\nexport class SceneManager extends StateMachine<Game> {\r\n    /**\r\n     * Updates the current scene\r\n     * @param deltaTime - time since last frame.\r\n     */\r\n    update(deltaTime: number): void {\r\n        let scene: Scene = this.peek() as Scene;\r\n        if (scene != null) {\r\n            scene.update(deltaTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render the current scene\r\n     */\r\n    renderScene(): void {\r\n        let scene: Scene = this.peek() as Scene;\r\n        \r\n        if (scene != null) {\r\n            scene.draw();\r\n        }\r\n    }\r\n}","export interface IState<T> {\r\n    /**\r\n     * Initialize a scene\r\n     */\r\n    initialize(entity: T): void;\r\n\r\n    /**\r\n     * Unload scene  \r\n     */\r\n    pause(entity: T): void;\r\n\r\n    /**\r\n     * \r\n     */\r\n    resume(entity: T): void;\r\n\r\n    /**\r\n     * Dispose scene\r\n     */\r\n    dispose(ebtity: T): void;\r\n}","import { IState } from \"./State\";\r\n\r\n/**\r\n * A state machine for handeling states.\r\n */\r\nexport class StateMachine<T> {\r\n    \"use strict\";\r\n\r\n    //********************************************\r\n    //** attributes:\r\n    //********************************************\r\n    \r\n    private _options            : StateMachineOptions;\r\n    private _stateStack         : IState<T>[] = [];\r\n    private readonly _entity    : T;\r\n\r\n    //********************************************\r\n    //**ctor:\r\n    //********************************************\r\n    \r\n    /**\r\n     * \r\n     * @param entity The owner of this state manager. \r\n     * @param [options] State machine options.\r\n     */\r\n    constructor(entity: T, options?:StateMachineOptions) {\r\n        this._options = Object.assign({}, _defaultOptions, options);\r\n        this._entity  = entity;\r\n    }\r\n\r\n    /**\r\n     * Sets the current state.\r\n     * \r\n     * @param state \r\n     */\r\n    push(state: IState<T>): void {\r\n        if(state == null) {\r\n            throw new Error(\"Cannot push null or undefinde to state stack\");\r\n        }\r\n\r\n        if (this._stateStack.length > 0) {\r\n            this.peek().pause(this._entity);\r\n        }\r\n\r\n        this._stateStack.push(state);\r\n        state.initialize(this._entity);\r\n    }\r\n\r\n    /**\r\n     * Sets the active state and removes resets history. \r\n     * \r\n     * @param state \r\n     */\r\n    pushAndClearHistory(state: IState<T>): void {\r\n        if (state == null) {\r\n            throw new Error(\"State cannot be null or undefined\");\r\n        }\r\n\r\n        this._stateStack = [];\r\n        this._stateStack.push(state);\r\n        state.initialize(this._entity)\r\n    }\r\n\r\n    /**\r\n     * Returns the first element in the stack without \r\n     * removing it.\r\n     */\r\n    peek(): IState<T> {\r\n        if(this._stateStack.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return this._stateStack[this._stateStack.length-1];\r\n    }\r\n    \r\n    /**\r\n     * Sets state history.\r\n     * \r\n     * @param states \r\n     */\r\n    setHistory(states: IState<T>[]): void {\r\n        if (states == null) {\r\n            throw new Error(\"Cannot set history state collection is null or undefined\");\r\n        }\r\n\r\n        this._stateStack = states.slice(0, this._options.maxHistoryLenght);\r\n    }\r\n\r\n    /**\r\n     * Pops the current state off the top off the history stack\r\n     * and calls resume on next state in the stack.\r\n     */\r\n    pop(): IState<T> {\r\n        if (this._stateStack.length <= 0) {\r\n            return null;\r\n        }\r\n        \r\n        let removed = this._stateStack.pop();\r\n        let top = this.peek();\r\n        if (top != null) {\r\n            top.resume(this._entity);\r\n        }\r\n\r\n        return removed;\r\n    }\r\n}\r\n\r\n\r\nexport interface StateMachineOptions {\r\n    maxHistoryLenght?: number;\r\n}\r\n\r\n\r\nlet _defaultOptions: StateMachineOptions = {\r\n    maxHistoryLenght: 10\r\n}","import {System} from \"../ecs/Ecs\";\r\nimport {Transform} from \"../components/Transform\";\r\nimport {RigidBody} from \"../components/RigidBody\";\r\nimport Logger from \"../infrastructure/Logger\";\r\n\r\n//********************************************\r\n\r\nconst logger = Logger.from(\"MovementSystem.ts\");\r\n\r\n//********************************************\r\n\r\nexport default class MovementSystem extends System {\r\n\r\n    constructor() {\r\n        super();\r\n        this.requireComponent(Transform);\r\n        this.requireComponent(RigidBody);\r\n    }\r\n\r\n    update(deltaTime: number): void {\r\n        this.entities.forEach(e => {\r\n            const transform = e.getComponent(Transform);\r\n            const rigidBody = e.getComponent(RigidBody);\r\n\r\n            transform.position = transform.position.add(rigidBody.velocity.multiply(deltaTime));\r\n        });\r\n    }\r\n}","import {System} from \"../ecs/Ecs\";\r\nimport {Transform} from \"../components/Transform\";\r\nimport {Sprite} from \"../components/Sprite\";\r\nimport IRenderer from \"../rendering/IRenderer\";\r\nimport {Rectangle} from \"../geometry/Rectangle\";\r\n\r\nexport class RenderingSystem extends System {\r\n\r\n    constructor() {\r\n        super();\r\n        this.requireComponent(Transform);\r\n        this.requireComponent(Sprite);\r\n    }\r\n\r\n    draw(context: IRenderer): void {\r\n        this.entities.forEach(e => {\r\n            const transform = e.getComponent(Transform);\r\n            const sprite = e.getComponent(Sprite);\r\n\r\n            context.renderRect(\r\n                transform.position.x,\r\n                transform.position.y,\r\n                new Rectangle(sprite.width, sprite.height),\r\n            );\r\n        });\r\n    }\r\n}","export type Vertex = [x: number, y: number];\r\n","export type ViewPort = {\r\n    width: number;\r\n    height: number;\r\n};","export * from \"./abstract/IDisposable\";\r\nexport * from \"./engine/components/Transform\";\r\nexport * from \"./engine/geometry/Circle\";\r\nexport * from \"./engine/geometry/Shape\";\r\nexport * from \"./engine/geometry/Line\";\r\nexport * from \"./engine/geometry/Rectangle\";\r\nexport * from \"./engine/geometry/Polygon\";\r\nexport * from \"./engine/geometry/Triangle\";\r\nexport * from \"./engine/input/InputManager\";\r\nexport * from \"./engine/input/KeyCode\";\r\nexport * from \"./engine/input/MouseButtonCode\";\r\nexport * from \"./engine/math/Point\";\r\nexport * from \"./engine/math/Vector2D\";\r\nexport * from \"./engine/rendering/Canvas2DRenderer\";\r\nexport * from \"./engine/scenes/Scene\";\r\nexport * from \"./engine/scenes/SceneManager\"; // no export needed?\r\nexport * from \"./engine/state/State\";\r\nexport * from \"./engine/state/StateMachine\";\r\nexport * from \"./engine/types/ViewPort\";\r\nexport * from \"./engine/types/CommonTypes\";\r\nexport * from \"./engine/Game\";\r\nexport * from \"./engine/components/Transform\";\r\nexport * from \"./engine/components/RigidBody\";\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {\r\n    Game,\r\n    RigidBody,\r\n    Scene,\r\n    Transform,\r\n    Vector2D\r\n} from \"stho-game-engine\";\r\nimport {Sprite} from \"stho-game-engine/src/engine/components/Sprite\";\r\n\r\n\r\nlet game: Game = new Game({clearColor: \"cornflowerblue\"});\r\n\r\nlet scene: Scene = new Scene(game);\r\n\r\nconst player = scene.createEntity();\r\nplayer.addComponent(Transform, Vector2D.from(10, 20));\r\nplayer.addComponent(RigidBody, Vector2D.from(0,0));\r\nplayer.addComponent(Sprite, 10, 20);\r\n\r\ngame.sceneManager.push(scene);\r\n\r\n// initialize game\r\ngame.init();\r\n\r\n// run game loop\r\ngame.run();\r\n"],"names":[],"sourceRoot":""}